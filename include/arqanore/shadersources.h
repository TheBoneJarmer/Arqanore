#pragma once

#define SHADER_POLYGON_F "#version 330 core\nout vec4 frag_color;\n\nin vec4 color;\nin vec2 texcoord;\n\nuniform sampler2D u_texture;\nuniform int u_texture_active;\nuniform int u_flip_hor;\nuniform int u_flip_vert;\n\nvoid main() {\nvec4 final_color = color;\nvec2 final_texcoord = texcoord;\n\nif (u_flip_hor == 1) {\nfinal_texcoord.x *= -1;\n}\n\nif (u_flip_vert == 1) {\nfinal_texcoord.y *= -1;\n}\n\nif (u_texture_active == 1) {\nfinal_color *= texture(u_texture, final_texcoord);\n}\n\nfrag_color = final_color;\n}\n"
#define SHADER_SPRITE_V "#version 330 core\nprecision mediump float;\n\nlayout (location = 0) in vec2 a_vertex;\nlayout (location = 1) in vec2 a_texcoord;\n\nuniform vec2 u_resolution;\nuniform vec2 u_rotation;\nuniform vec2 u_translation;\nuniform vec2 u_scale;\nuniform vec4 u_color;\nuniform vec2 u_origin;\nuniform vec2 u_offset;\n\nout vec4 color;\nout vec2 texcoord;\n\nvoid main() {\nvec2 vertex = a_vertex - u_origin;\nvertex = vertex * u_scale;\nvertex = vec2(vertex.x * u_rotation.y + vertex.y * u_rotation.x, vertex.y * u_rotation.y - vertex.x * u_rotation.x);\nvertex = vertex + u_translation;\nvertex = vertex / u_resolution;\nvertex = (vertex * 2.0) - 1.0;\n\ncolor = u_color;\ntexcoord = a_texcoord + u_offset;\n\ngl_Position = vec4(vertex.x, -vertex.y, 0, 1);\n}\n"
#define SHADER_SPRITE_F "#version 330 core\nout vec4 frag_color;\n\nin vec4 color;\nin vec2 texcoord;\n\nuniform sampler2D u_texture;\nuniform int u_flip_hor;\nuniform int u_flip_vert;\n\nvoid main() {\nvec2 final_texcoord = texcoord;\n\nif (u_flip_hor == 1) {\nfinal_texcoord.x *= -1;\n}\n\nif (u_flip_vert == 1) {\nfinal_texcoord.y *= -1;\n}\n\nfrag_color = color * texture(u_texture, final_texcoord);\n}\n"
#define SHADER_FONT_F "#version 330 core\nout vec4 frag_color;\n\nin vec4 color;\nin vec2 texcoord;\n\nuniform sampler2D u_image;\n\nvoid main() {\nvec4 tex_color = texture(u_image, texcoord);\nvec4 result_color = vec4(1.0, 1.0, 1.0, tex_color.r) * color;\n\nfrag_color = result_color;\n}\n"
#define SHADER_FONT_V "#version 330 core\nin vec2 a_position;\nin vec2 a_texcoord;\n\nuniform vec2 u_resolution;\nuniform vec2 u_rotation;\nuniform vec2 u_translation;\nuniform vec2 u_scale;\nuniform vec4 u_color;\n\nout vec4 color;\nout vec2 texcoord;\n\nvoid main() {\nvec2 vertex = a_position;\nvertex = vertex * u_scale;\nvertex = vec2(vertex.x * u_rotation.y + vertex.y * u_rotation.x, vertex.y * u_rotation.y - vertex.x * u_rotation.x);\nvertex = vertex + u_translation;\nvertex = vertex / u_resolution;\nvertex = (vertex * 2.0) - 1.0;\n\ncolor = u_color;\ntexcoord = a_texcoord;\n\ngl_Position = vec4(vertex.x, -vertex.y, 0, 1);\n}\n"
#define SHADER_POLYGON_V "#version 330 core\nprecision mediump float;\n\nlayout (location = 0) in vec2 a_vertex;\nlayout (location = 1) in vec2 a_texcoord;\n\nuniform vec2 u_resolution;\nuniform vec2 u_rotation;\nuniform vec2 u_translation;\nuniform vec2 u_scale;\nuniform vec4 u_color;\nuniform vec2 u_origin;\nuniform vec2 u_offset;\n\nout vec4 color;\nout vec2 texcoord;\n\nvoid main() {\nvec2 vertex = a_vertex - u_origin;\nvertex = vertex * u_scale;\nvertex = vec2(vertex.x * u_rotation.y + vertex.y * u_rotation.x, vertex.y * u_rotation.y - vertex.x * u_rotation.x);\nvertex = vertex + u_translation;\nvertex = vertex / u_resolution;\nvertex = (vertex * 2.0) - 1.0;\n\ncolor = u_color;\ntexcoord = a_texcoord + u_offset;\n\ngl_Position = vec4(vertex.x, -vertex.y, 0, 1);\n}\n"
